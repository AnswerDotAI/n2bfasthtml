"""Create FastHTML from a NB"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['strip_list', 'render_md', 'render_md_cell', 'get_nb_lang', 'render_code_source', 'render_code_output', 'render_nb']

# %% ../nbs/00_core.ipynb 4
from fasthtml.common import *
from pathlib import Path
import json

# %% ../nbs/00_core.ipynb 6
def strip_list(l, val='\n'):
    start, end = 0, len(l)
    while start < end and l[start] == val: start += 1
    while end > start and l[end - 1] == val: end -= 1
    return l[start:end]

# %% ../nbs/00_core.ipynb 7
def render_md(c):
    # TODO default to FastHTML's implementation
    return c

# %% ../nbs/00_core.ipynb 8
def render_md_cell(cell):
    assert cell['cell_type'] == 'markdown'
    return Div(cls='marked')(render_md(''.join(strip_list(cell['source']))))

# %% ../nbs/00_core.ipynb 10
def get_nb_lang(nb): return nb['metadata']['kernelspec']['language']
# get_nb_lang(xt_nb)

# %% ../nbs/00_core.ipynb 11
def render_code_source(cell,lang='python'):
    if cell['source']==[]: return ''
    code = f'''```{lang}\n{''.join(strip_list(cell['source']))}'''
    return Div(cls='marked')(render_md(code))

# %% ../nbs/00_core.ipynb 13
def render_code_output(cell,lang='python'):
    res = []
    if len(cell['outputs'])==0: ''
    for output in cell['outputs']:
        if output['output_type'] == 'execute_result':
            data = output['data']
            if 'text/markdown' in data.keys(): 
                res.append(NotStr(''.join(strip_list(data['text/markdown'][1:-1]))))
            elif 'text/plain' in data.keys(): 
                res.append(''.join(strip_list(data['text/plain'])))
        if output['output_type'] == 'stream':
            res.append(''.join(strip_list(output['text'])))
    return Footer(cls='marked')(*res)

# %% ../nbs/00_core.ipynb 16
def render_nb(fpath, # Path to Jupyter Notebook
              wrapper=Main, #Wraps entire rendered NB, default is for pico
              cls='container', # cls to be passed to wrapper, default is for pico
              md_cell_wrapper=Div, # Wraps markdown cell
              md_fn=render_md_cell, # md cell -> rendered html
              code_cell_wrapper=Card, # Wraps Source Code (body) + Outputs (footer)
              cd_fn=render_code_source, # code cell -> code source rendered html
              out_fn=render_code_output, # code cell -> code output rendered html
              **kwargs # Passed to wrapper
             ): 
    with open(fpath, 'r') as f: xt_nb = json.load(f)
    fname = Path(fpath).name
    res = []
    for cell in xt_nb['cells']:
        if cell['cell_type']=='code':
            s,o = cd_fn(cell), out_fn(cell)
            res.append(code_cell_wrapper(s,o))
        elif cell['cell_type']=='markdown': 
            res.append(md_cell_wrapper(md_fn(cell)))
    return wrapper(cls=cls)(*res)
